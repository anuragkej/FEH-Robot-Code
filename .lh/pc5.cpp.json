{
    "sourceFile": "pc5.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1711995923782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1711995923782,
            "name": "Commit-0",
            "content": "#include <FEHUtility.h>\n#include <FEHMotor.h>\n#include <FEHIO.h>\n#include <FEHLCD.h>\n#include <FEHServo.h>\n#include <FEHRCS.h>\n#include <FEHBattery.h>\n\n// Servo Max: 2277\n// Servo Min: 500\n\n// servo2 max: 2330\n// servo2 min: 500\n\nvoid driveForward(float time, int percent);\nvoid turn(char direction, float time, int dominant_motor_percent, int nondom_motor_percent);\n// declare motor on motor port 0, set maximum voltage to 9.0 V\n// right motor is inversed (i.e, driving forward, RM would be at a negative percent)\n\nFEHMotor blm(FEHMotor::Motor1, 7.0);\nFEHMotor brm(FEHMotor::Motor3, 7.0);\nFEHMotor flm(FEHMotor::Motor0, 7.0);\nFEHMotor frm(FEHMotor::Motor2, 7.0);\n\nint main()\n{\n    RCS.InitializeTouchMenu(\"E6aMLIy03\");\n\n    FEHServo s1(FEHServo::Servo6);\n    FEHServo s2(FEHServo::Servo7);\n\n    AnalogInputPin light(FEHIO::P2_7);\n\n    while (light.Value() > 0.9)\n        ;\n\n    // reset servo motors\n    s1.SetDegree(180);\n    s2.SetDegree(90);\n\n    turn('R', 0.7, 80, 25);\n    driveForward(0.3, 100);\n    turn('L', 0.7, 80, 25);\n    driveForward(1.0, 100);\n    turn('L', 1.0, 80, 25);\n    driveForward(1.2, 100);\n    turn('R', 1.0, 80, 25);\n    Sleep(0.5);\n    driveForward(0.15, 50);\n    turn('L', 0.8, 100, -100);\n    s2.SetDegree(150);\n    Sleep(0.5);\n    driveForward(0.5, -100);\n    driveForward(0.15, 50);\n    s2.SetDegree(60);\n    Sleep(0.5);\n    s2.SetDegree(150);\n}\nvoid driveForward(float time, int percent)\n{\n    /*float adjustedpercent;\n    adjustedpercent = (11.5 / Battery.Voltage()) * percent;*/\n    frm.SetPercent(percent);\n    flm.SetPercent(percent);\n    brm.SetPercent(percent);\n    blm.SetPercent(percent);\n    Sleep(time);\n    frm.SetPercent(0);\n    flm.SetPercent(0);\n    brm.SetPercent(0);\n    blm.SetPercent(0);\n}\n\nvoid turn(char direction, float time, int dominant_motor_percent, int nondom_motor_percent)\n{\n\n    /*float adj_dominant_motor_percent = (11.5 / Battery.Voltage()) * dominant_motor_percent;\n    float adj_nondom_motor_percent = (11.5 / Battery.Voltage()) * nondom_motor_percent;*/\n\n    if (direction == 'L')\n    {\n        frm.SetPercent(dominant_motor_percent);\n        flm.SetPercent(nondom_motor_percent);\n        brm.SetPercent(dominant_motor_percent);\n        blm.SetPercent(nondom_motor_percent);\n    }\n    else if (direction == 'R')\n    {\n        frm.SetPercent(nondom_motor_percent);\n        flm.SetPercent(dominant_motor_percent);\n        brm.SetPercent(nondom_motor_percent);\n        blm.SetPercent(dominant_motor_percent);\n    }\n    Sleep(time);\n    frm.SetPercent(0);\n    flm.SetPercent(0);\n    brm.SetPercent(0);\n    blm.SetPercent(0);\n}\n"
        }
    ]
}